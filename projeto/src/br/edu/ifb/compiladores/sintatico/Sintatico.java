
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Jun 11 00:24:37 BRT 2019
//----------------------------------------------------

package br.edu.ifb.compiladores.sintatico;

import br.edu.ifb.compiladores.view.Janela;
import java_cup.runtime.*;
import java.util.*;
import java.io.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Jun 11 00:24:37 BRT 2019
  */
public class Sintatico extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintatico() {super();}

  /** Constructor which sets the default scanner. */
  public Sintatico(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintatico(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\003\003\000\002\003\003\000\002\003\004" +
    "\000\002\003\004\000\002\004\007\000\002\006\003\000" +
    "\002\006\005\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\005\007\000\002\005\005\000\002\010" +
    "\006\000\002\010\007\000\002\011\005\000\002\011\007" +
    "\000\002\011\002\000\002\012\005\000\002\013\003\000" +
    "\002\013\004\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\003\000\002\014\003\000\002\014\003\000\002\015\006" +
    "\000\002\016\007\000\002\017\011\000\002\017\007\000" +
    "\002\020\007\000\002\020\006\000\002\022\004\000\002" +
    "\021\005\000\002\025\006\000\002\025\007\000\002\025" +
    "\005\000\002\025\006\000\002\024\005\000\002\024\003" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\005\000\002\023\005\000\002\023\005\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\003\000\002\026\005\000\002\026\004\000" +
    "\002\026\004\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\010\002\uffff\014\010\015\004\001\002\000" +
    "\004\047\200\001\002\000\010\002\ufffd\014\ufffd\015\ufffd" +
    "\001\002\000\004\002\177\001\002\000\010\002\ufffe\014" +
    "\ufffe\015\ufffe\001\002\000\004\047\014\001\002\000\010" +
    "\002\000\014\010\015\004\001\002\000\010\002\ufffb\014" +
    "\ufffb\015\ufffb\001\002\000\010\002\ufffc\014\ufffc\015\ufffc" +
    "\001\002\000\004\036\174\001\002\000\010\031\017\040" +
    "\021\047\016\001\002\000\004\036\162\001\002\000\010" +
    "\010\157\011\155\013\160\001\002\000\010\002\ufff3\014" +
    "\ufff3\015\ufff3\001\002\000\020\004\032\006\025\007\026" +
    "\012\022\015\004\040\021\047\033\001\002\000\004\036" +
    "\147\001\002\000\024\004\uffe3\005\uffe3\006\uffe3\007\uffe3" +
    "\012\uffe3\015\uffe3\037\uffe3\040\uffe3\047\uffe3\001\002\000" +
    "\024\004\uffe6\005\uffe6\006\uffe6\007\uffe6\012\uffe6\015\uffe6" +
    "\037\uffe6\040\uffe6\047\uffe6\001\002\000\004\036\143\001" +
    "\002\000\020\017\054\031\052\036\047\043\046\044\056" +
    "\045\057\047\053\001\002\000\024\004\uffe4\005\uffe4\006" +
    "\uffe4\007\uffe4\012\uffe4\015\uffe4\037\uffe4\040\uffe4\047\uffe4" +
    "\001\002\000\006\042\140\047\060\001\002\000\024\004" +
    "\uffe9\005\uffe9\006\uffe9\007\uffe9\012\uffe9\015\uffe9\037\uffe9" +
    "\040\uffe9\047\uffe9\001\002\000\004\036\132\001\002\000" +
    "\006\016\045\036\044\001\002\000\024\004\uffe7\005\uffe7" +
    "\006\uffe7\007\uffe7\012\uffe7\015\uffe7\037\uffe7\040\uffe7\047" +
    "\uffe7\001\002\000\024\004\uffe8\005\uffe8\006\uffe8\007\uffe8" +
    "\012\uffe8\015\uffe8\037\uffe8\040\uffe8\047\uffe8\001\002\000" +
    "\022\004\032\006\025\007\026\012\022\015\004\037\042" +
    "\040\021\047\033\001\002\000\024\004\uffe5\005\uffe5\006" +
    "\uffe5\007\uffe5\012\uffe5\015\uffe5\037\uffe5\040\uffe5\047\uffe5" +
    "\001\002\000\024\004\uffea\005\uffea\006\uffea\007\uffea\012" +
    "\uffea\015\uffea\037\uffea\040\uffea\047\uffea\001\002\000\022" +
    "\004\uffec\006\uffec\007\uffec\012\uffec\015\uffec\037\uffec\040" +
    "\uffec\047\uffec\001\002\000\030\002\uffed\004\uffed\005\uffed" +
    "\006\uffed\007\uffed\012\uffed\014\uffed\015\uffed\037\uffed\040" +
    "\uffed\047\uffed\001\002\000\022\004\uffeb\006\uffeb\007\uffeb" +
    "\012\uffeb\015\uffeb\037\uffeb\040\uffeb\047\uffeb\001\002\000" +
    "\022\017\054\031\052\035\130\036\047\043\046\044\056" +
    "\045\057\047\053\001\002\000\020\017\054\031\052\036" +
    "\047\043\046\044\056\045\057\047\053\001\002\000\042" +
    "\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\026" +
    "\uffc3\027\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\041\uffc3\042\uffc3\001\002\000\020\017\054\031" +
    "\052\036\047\043\046\044\056\045\057\047\053\001\002" +
    "\000\042\020\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025" +
    "\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7" +
    "\034\uffc7\035\uffc7\041\uffc7\042\uffc7\001\002\000\036\020" +
    "\066\021\101\022\070\023\100\024\067\025\071\026\075" +
    "\027\077\030\072\031\073\032\076\033\074\034\065\042" +
    "\124\001\002\000\020\017\054\031\052\036\047\043\046" +
    "\044\056\045\057\047\053\001\002\000\044\020\uffc0\021" +
    "\uffc0\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\036" +
    "\044\041\uffc0\042\uffc0\001\002\000\020\017\054\031\052" +
    "\036\047\043\046\044\056\045\057\047\053\001\002\000" +
    "\044\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\041\uffbf\042\uffbf\047\060\001\002\000\042" +
    "\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\026" +
    "\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1\034\uffc1" +
    "\035\uffc1\041\uffc1\042\uffc1\001\002\000\042\020\uffc2\021" +
    "\uffc2\022\uffc2\023\uffc2\024\uffc2\025\uffc2\026\uffc2\027\uffc2" +
    "\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2\035\uffc2\041" +
    "\uffc2\042\uffc2\001\002\000\004\036\061\001\002\000\022" +
    "\017\054\031\052\035\063\036\047\043\046\044\056\045" +
    "\057\047\053\001\002\000\006\035\117\041\120\001\002" +
    "\000\044\020\uffd7\021\uffd7\022\uffd7\023\uffd7\024\uffd7\025" +
    "\uffd7\026\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\034\uffd7\035\uffd7\041\uffd7\042\uffd7\047\uffd7\001\002\000" +
    "\040\020\066\021\101\022\070\023\100\024\067\025\071" +
    "\026\075\027\077\030\072\031\073\032\076\033\074\034" +
    "\065\035\uffd5\041\uffd5\001\002\000\020\017\054\031\052" +
    "\036\047\043\046\044\056\045\057\047\053\001\002\000" +
    "\020\017\054\031\052\036\047\043\046\044\056\045\057" +
    "\047\053\001\002\000\020\017\054\031\052\036\047\043" +
    "\046\044\056\045\057\047\053\001\002\000\020\017\054" +
    "\031\052\036\047\043\046\044\056\045\057\047\053\001" +
    "\002\000\020\017\054\031\052\036\047\043\046\044\056" +
    "\045\057\047\053\001\002\000\020\017\054\031\052\036" +
    "\047\043\046\044\056\045\057\047\053\001\002\000\020" +
    "\017\054\031\052\036\047\043\046\044\056\045\057\047" +
    "\053\001\002\000\020\017\054\031\052\036\047\043\046" +
    "\044\056\045\057\047\053\001\002\000\020\017\054\031" +
    "\052\036\047\043\046\044\056\045\057\047\053\001\002" +
    "\000\020\017\054\031\052\036\047\043\046\044\056\045" +
    "\057\047\053\001\002\000\020\017\054\031\052\036\047" +
    "\043\046\044\056\045\057\047\053\001\002\000\020\017" +
    "\054\031\052\036\047\043\046\044\056\045\057\047\053" +
    "\001\002\000\020\017\054\031\052\036\047\043\046\044" +
    "\056\045\057\047\053\001\002\000\042\020\uffce\021\uffce" +
    "\022\070\023\100\024\067\025\071\026\075\027\077\030" +
    "\072\031\073\032\076\033\074\034\065\035\uffce\041\uffce" +
    "\042\uffce\001\002\000\042\020\uffca\021\uffca\022\uffca\023" +
    "\uffca\024\uffca\025\uffca\026\uffca\027\uffca\030\072\031\073" +
    "\032\076\033\074\034\065\035\uffca\041\uffca\042\uffca\001" +
    "\002\000\042\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\030\072\031\073\032\076\033" +
    "\074\034\065\035\uffcc\041\uffcc\042\uffcc\001\002\000\042" +
    "\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2" +
    "\035\uffd2\041\uffd2\042\uffd2\001\002\000\042\020\uffcd\021" +
    "\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\026\uffcd\027\uffcd" +
    "\030\072\031\073\032\076\033\074\034\065\035\uffcd\041" +
    "\uffcd\042\uffcd\001\002\000\042\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1\031" +
    "\uffd1\032\uffd1\033\uffd1\034\uffd1\035\uffd1\041\uffd1\042\uffd1" +
    "\001\002\000\042\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024" +
    "\uffd3\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032\076" +
    "\033\074\034\065\035\uffd3\041\uffd3\042\uffd3\001\002\000" +
    "\042\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4" +
    "\026\uffd4\027\uffd4\030\uffd4\031\uffd4\032\076\033\074\034" +
    "\065\035\uffd4\041\uffd4\042\uffd4\001\002\000\042\020\uffc8" +
    "\021\uffc8\022\uffc8\023\uffc8\024\uffc8\025\uffc8\026\uffc8\027" +
    "\uffc8\030\072\031\073\032\076\033\074\034\065\035\uffc8" +
    "\041\uffc8\042\uffc8\001\002\000\042\020\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\072" +
    "\031\073\032\076\033\074\034\065\035\uffcb\041\uffcb\042" +
    "\uffcb\001\002\000\042\020\uffc9\021\uffc9\022\uffc9\023\uffc9" +
    "\024\uffc9\025\uffc9\026\uffc9\027\uffc9\030\072\031\073\032" +
    "\076\033\074\034\065\035\uffc9\041\uffc9\042\uffc9\001\002" +
    "\000\042\020\uffcf\021\uffcf\022\070\023\100\024\067\025" +
    "\071\026\075\027\077\030\072\031\073\032\076\033\074" +
    "\034\065\035\uffcf\041\uffcf\042\uffcf\001\002\000\042\020" +
    "\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026\uffd0" +
    "\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0\035" +
    "\uffd0\041\uffd0\042\uffd0\001\002\000\044\020\uffd9\021\uffd9" +
    "\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030" +
    "\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\035\uffd9\041\uffd9" +
    "\042\uffd9\047\uffd9\001\002\000\020\017\054\031\052\036" +
    "\047\043\046\044\056\045\057\047\053\001\002\000\040" +
    "\020\066\021\101\022\070\023\100\024\067\025\071\026" +
    "\075\027\077\030\072\031\073\032\076\033\074\034\065" +
    "\035\uffd6\041\uffd6\001\002\000\042\020\uffc5\021\uffc5\022" +
    "\uffc5\023\uffc5\024\uffc5\025\uffc5\026\uffc5\027\uffc5\030\uffc5" +
    "\031\uffc5\032\uffc5\033\uffc5\034\uffc5\035\uffc5\041\uffc5\042" +
    "\uffc5\001\002\000\042\020\uffc4\021\uffc4\022\uffc4\023\uffc4" +
    "\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\041\uffc4\042\uffc4\001\002" +
    "\000\024\004\uffe2\005\uffe2\006\uffe2\007\uffe2\012\uffe2\015" +
    "\uffe2\037\uffe2\040\uffe2\047\uffe2\001\002\000\036\020\066" +
    "\021\101\022\070\023\100\024\067\025\071\026\075\027" +
    "\077\030\072\031\073\032\076\033\074\034\065\035\126" +
    "\001\002\000\042\020\uffc6\021\uffc6\022\uffc6\023\uffc6\024" +
    "\uffc6\025\uffc6\026\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6" +
    "\033\uffc6\034\uffc6\035\uffc6\041\uffc6\042\uffc6\001\002\000" +
    "\006\035\131\041\120\001\002\000\044\020\uffd8\021\uffd8" +
    "\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8\027\uffd8\030" +
    "\uffd8\031\uffd8\032\uffd8\033\uffd8\034\uffd8\035\uffd8\041\uffd8" +
    "\042\uffd8\047\uffd8\001\002\000\044\020\uffda\021\uffda\022" +
    "\uffda\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\041\uffda\042" +
    "\uffda\047\uffda\001\002\000\020\017\054\031\052\036\047" +
    "\043\046\044\056\045\057\047\053\001\002\000\036\020" +
    "\066\021\101\022\070\023\100\024\067\025\071\026\075" +
    "\027\077\030\072\031\073\032\076\033\074\034\065\035" +
    "\134\001\002\000\020\004\032\006\025\007\026\012\022" +
    "\015\004\040\021\047\033\001\002\000\024\004\uffdf\005" +
    "\136\006\uffdf\007\uffdf\012\uffdf\015\uffdf\037\uffdf\040\uffdf" +
    "\047\uffdf\001\002\000\020\004\032\006\025\007\026\012" +
    "\022\015\004\040\021\047\033\001\002\000\024\004\uffe0" +
    "\005\uffe0\006\uffe0\007\uffe0\012\uffe0\015\uffe0\037\uffe0\040" +
    "\uffe0\047\uffe0\001\002\000\024\004\uffdc\005\uffdc\006\uffdc" +
    "\007\uffdc\012\uffdc\015\uffdc\037\uffdc\040\uffdc\047\uffdc\001" +
    "\002\000\036\020\066\021\101\022\070\023\100\024\067" +
    "\025\071\026\075\027\077\030\072\031\073\032\076\033" +
    "\074\034\065\042\142\001\002\000\024\004\uffdb\005\uffdb" +
    "\006\uffdb\007\uffdb\012\uffdb\015\uffdb\037\uffdb\040\uffdb\047" +
    "\uffdb\001\002\000\020\017\054\031\052\036\047\043\046" +
    "\044\056\045\057\047\053\001\002\000\036\020\066\021" +
    "\101\022\070\023\100\024\067\025\071\026\075\027\077" +
    "\030\072\031\073\032\076\033\074\034\065\035\145\001" +
    "\002\000\020\004\032\006\025\007\026\012\022\015\004" +
    "\040\021\047\033\001\002\000\024\004\uffe1\005\uffe1\006" +
    "\uffe1\007\uffe1\012\uffe1\015\uffe1\037\uffe1\040\uffe1\047\uffe1" +
    "\001\002\000\022\017\054\031\052\035\151\036\047\043" +
    "\046\044\056\045\057\047\053\001\002\000\006\035\153" +
    "\041\120\001\002\000\004\042\152\001\002\000\024\004" +
    "\uffdd\005\uffdd\006\uffdd\007\uffdd\012\uffdd\015\uffdd\037\uffdd" +
    "\040\uffdd\047\uffdd\001\002\000\004\042\154\001\002\000" +
    "\024\004\uffde\005\uffde\006\uffde\007\uffde\012\uffde\015\uffde" +
    "\037\uffde\040\uffde\047\uffde\001\002\000\012\035\ufff6\040" +
    "\ufff6\041\ufff6\042\ufff6\001\002\000\004\040\021\001\002" +
    "\000\012\035\ufff5\040\ufff5\041\ufff5\042\ufff5\001\002\000" +
    "\012\035\ufff7\040\ufff7\041\ufff7\042\ufff7\001\002\000\010" +
    "\002\ufff4\014\ufff4\015\ufff4\001\002\000\010\035\uffee\041" +
    "\uffee\047\163\001\002\000\004\031\172\001\002\000\006" +
    "\035\165\041\166\001\002\000\010\031\ufff1\040\ufff1\047" +
    "\ufff1\001\002\000\004\047\167\001\002\000\004\031\170" +
    "\001\002\000\010\010\157\011\155\013\160\001\002\000" +
    "\006\035\uffef\041\uffef\001\002\000\010\010\157\011\155" +
    "\013\160\001\002\000\006\035\ufff0\041\ufff0\001\002\000" +
    "\010\035\uffee\041\uffee\047\163\001\002\000\006\035\176" +
    "\041\166\001\002\000\010\031\ufff2\040\ufff2\047\ufff2\001" +
    "\002\000\004\002\001\001\002\000\006\031\ufff9\041\ufff9" +
    "\001\002\000\006\031\202\041\203\001\002\000\010\010" +
    "\157\011\155\013\160\001\002\000\004\047\204\001\002" +
    "\000\006\031\ufff8\041\ufff8\001\002\000\004\042\206\001" +
    "\002\000\030\002\ufffa\004\ufffa\005\ufffa\006\ufffa\007\ufffa" +
    "\012\ufffa\014\ufffa\015\ufffa\037\ufffa\040\ufffa\047\ufffa\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\012\002\005\003\010\004\004\005\006\001" +
    "\001\000\004\006\200\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\014\001\001\000" +
    "\006\004\011\005\012\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\017\001\001\000" +
    "\002\001\001\000\004\007\155\001\001\000\002\001\001" +
    "\000\030\004\037\012\026\013\035\014\040\015\030\016" +
    "\034\017\033\020\023\021\036\022\022\025\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\023\140\025\054\026\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\004\037\012\026\014\042\015\030\016" +
    "\034\017\033\020\023\021\036\022\022\025\027\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\023\063\024\126" +
    "\025\054\026\047\001\001\000\010\023\050\025\054\026" +
    "\047\001\001\000\002\001\001\000\010\023\124\025\054" +
    "\026\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\054\026\122\001\001\000\002\001\001\000\006" +
    "\025\054\026\121\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\023\063" +
    "\024\061\025\054\026\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\023\115\025\054" +
    "\026\047\001\001\000\010\023\114\025\054\026\047\001" +
    "\001\000\010\023\113\025\054\026\047\001\001\000\010" +
    "\023\112\025\054\026\047\001\001\000\010\023\111\025" +
    "\054\026\047\001\001\000\010\023\110\025\054\026\047" +
    "\001\001\000\010\023\107\025\054\026\047\001\001\000" +
    "\010\023\106\025\054\026\047\001\001\000\010\023\105" +
    "\025\054\026\047\001\001\000\010\023\104\025\054\026" +
    "\047\001\001\000\010\023\103\025\054\026\047\001\001" +
    "\000\010\023\102\025\054\026\047\001\001\000\010\023" +
    "\101\025\054\026\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\023\120\025\054\026\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\023\132\025\054\026\047" +
    "\001\001\000\002\001\001\000\026\004\037\012\026\014" +
    "\134\015\030\016\034\017\033\020\023\021\036\022\022" +
    "\025\027\001\001\000\002\001\001\000\026\004\037\012" +
    "\026\014\136\015\030\016\034\017\033\020\023\021\036" +
    "\022\022\025\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\023\143" +
    "\025\054\026\047\001\001\000\002\001\001\000\026\004" +
    "\037\012\026\014\145\015\030\016\034\017\033\020\023" +
    "\021\036\022\022\025\027\001\001\000\002\001\001\000" +
    "\012\023\063\024\147\025\054\026\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\160" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\011\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\007\170\001\001\000\002\001\001\000\004" +
    "\007\172\001\001\000\002\001\001\000\004\011\174\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\007\204\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintatico$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintatico$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintatico$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void report_error(String message, Object info){
        System.err.println("# Warning: " + message);
        System.err.println("Token: " + Sym.terminalNames[((Symbol) info).sym] +" na linha "+((Symbol) info).left +" e na coluna "+((Symbol)info).right);

        Janela.addTextTASintatico("# Warning: " + message);
        Janela.addTextTASintatico("Token: " + Sym.terminalNames[((Symbol) info).sym] + " na linha "+((Symbol) info).left + " e na coluna "+((Symbol)info).right);
    }

    public void report_fatal_error(String message, Object info){
        Janela.addTextTASintatico("# Error: " + message);
        Janela.addTextTASintatico("Token - " + Sym.terminalNames[((Symbol) info).sym] +" na linha "+((Symbol) info).left+" e na coluna "+((Symbol)info).right);

        System.err.println("# Error: " + message);
        System.err.println("Error - " + message + " - Token - " + Sym.terminalNames[((Symbol) info).sym] +" na linha "+((Symbol) info).left+" e na coluna "+((Symbol)info).right);

        System.exit(-1);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintatico$actions {
  private final Sintatico parser;

  /** Constructor */
  CUP$Sintatico$actions(Sintatico parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintatico$do_action(
    int                        CUP$Sintatico$act_num,
    java_cup.runtime.lr_parser CUP$Sintatico$parser,
    java.util.Stack            CUP$Sintatico$stack,
    int                        CUP$Sintatico$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintatico$result;

      /* select the action based on the action number */
      switch (CUP$Sintatico$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // expr_basica ::= chamada_func 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("expr_basica",20, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // expr_basica ::= ID 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("expr_basica",20, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // expr_basica ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("expr_basica",20, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // expr_basica ::= CHAR 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("expr_basica",20, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // expr_basica ::= INTEIRO 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("expr_basica",20, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // expr_basica ::= SUB expr_basica 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("expr_basica",20, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // expr_basica ::= NOT expr_basica 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("expr_basica",20, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // expr_basica ::= PARENTESE_E expressao PARENTESE_D 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("expr_basica",20, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // expressao ::= expr_basica 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // expressao ::= expressao MAIOR_IGUAL expressao 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // expressao ::= expressao MAIOR expressao 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expressao ::= expressao MENOR_IGUAL expressao 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expressao ::= expressao MENOR expressao 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expressao ::= expressao DIFERENTE expressao 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expressao ::= expressao IGUAL expressao 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expressao ::= expressao OR expressao 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expressao ::= expressao AND expressao 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expressao ::= expressao PORCENTO expressao 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expressao ::= expressao DIV expressao 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expressao ::= expressao MUL expressao 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expressao ::= expressao SUB expressao 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expressao ::= expressao ADD expressao 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("expressao",17, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // lista_exprs ::= expressao 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_exprs",18, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // lista_exprs ::= lista_exprs VIRGULA expressao 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_exprs",18, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // chamada_func ::= chamada_func ID PARENTESE_E PARENTESE_D 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("chamada_func",19, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // chamada_func ::= ID PARENTESE_E PARENTESE_D 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("chamada_func",19, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // chamada_func ::= chamada_func ID PARENTESE_E lista_exprs PARENTESE_D 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("chamada_func",19, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // chamada_func ::= ID PARENTESE_E lista_exprs PARENTESE_D 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("chamada_func",19, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // retorno ::= RETURN expressao PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("retorno",15, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // chamada_func_cmd ::= chamada_func PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("chamada_func_cmd",16, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // escrita ::= PRNT PARENTESE_E PARENTESE_D PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("escrita",14, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // escrita ::= PRNT PARENTESE_E lista_exprs PARENTESE_D PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("escrita",14, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // decisao ::= IF PARENTESE_E expressao PARENTESE_D comando 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("decisao",13, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // decisao ::= IF PARENTESE_E expressao PARENTESE_D comando ELSE comando 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("decisao",13, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-6)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // iteracao ::= WHILE PARENTESE_E expressao PARENTESE_D comando 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("iteracao",12, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // atribuicao ::= ID SETOP expressao PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("atribuicao",11, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // comando ::= chamada_func_cmd 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // comando ::= bloco 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comando ::= retorno 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comando ::= escrita 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // comando ::= decisao 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // comando ::= iteracao 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // comando ::= atribuicao 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // comando ::= decl_variavel 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("comando",10, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // lista_comandos ::= lista_comandos comando 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_comandos",9, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lista_comandos ::= comando 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_comandos",9, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bloco ::= CHAVE_E lista_comandos CHAVE_D 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("bloco",8, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // param_formais ::= 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("param_formais",7, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // param_formais ::= param_formais VIRGULA ID SUB tipo 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("param_formais",7, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // param_formais ::= ID SUB tipo 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("param_formais",7, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // nome_args ::= nome_args ID PARENTESE_E param_formais PARENTESE_D 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("nome_args",6, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // nome_args ::= ID PARENTESE_E param_formais PARENTESE_D 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("nome_args",6, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-3)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // decl_funcao ::= PROC nome_args bloco 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("decl_funcao",3, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // decl_funcao ::= PROC nome_args SUB tipo bloco 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("decl_funcao",3, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tipo ::= FLOAT_T 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tipo ::= CHAR_T 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tipo ::= INTEIRO_T 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("tipo",5, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // lista_idents ::= lista_idents VIRGULA ID 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_idents",4, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-2)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // lista_idents ::= ID 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("lista_idents",4, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl_variavel ::= VAR lista_idents SUB tipo PONTO_VIRGULA 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("decl_variavel",2, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-4)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl_global ::= decl_global decl_variavel 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("decl_global",1, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // decl_global ::= decl_global decl_funcao 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("decl_global",1, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // decl_global ::= decl_variavel 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("decl_global",1, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // decl_global ::= decl_funcao 
            {
              Object RESULT =null;
		System.out.println("chama decl_fucao"); 
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("decl_global",1, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // programa ::= 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // programa ::= decl_global 
            {
              Object RESULT =null;

              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("programa",0, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          return CUP$Sintatico$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= programa EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)).value;
		RESULT = start_val;
              CUP$Sintatico$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintatico$stack.elementAt(CUP$Sintatico$top-1)), ((java_cup.runtime.Symbol)CUP$Sintatico$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintatico$parser.done_parsing();
          return CUP$Sintatico$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

